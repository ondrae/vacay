// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, or any plugin's
// vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file. JavaScript code in this file should be added after the last require_* statement.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require rails-ujs
//= require activestorage
//= require turbolinks
//= require_tree .


document.addEventListener('DOMContentLoaded', function () {

    var navbarBurger = document.getElementById('navbar-burger');
    var navbarMenu = document.getElementById('navbar-menu');

    navbarBurger.addEventListener('click', function () {
        navbarBurger.classList.toggle('is-active');
        navbarMenu.classList.toggle('is-active');
    });

    if ($("#map").length) {
        //map
        mapboxgl.accessToken = '<%= ENV['MAPBOX_ACCESS_TOKEN'] %>';
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v10',
            center: [-122.41, 37.77],
            zoom: 10
        });

        var geocoder = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken
        });

        // search
        var client = new MapboxClient('<%= ENV['MAPBOX_ACCESS_TOKEN'] %>');

        $('#search').change(function(event) {
            search_term = $(this).val();
            middleOfMap = map.getCenter();

            client.geocodeForward(search_term, {
                proximity: { latitude: middleOfMap['lat'], longitude: middleOfMap['lng'] }
            }, function(err, data, res) {
                // data is the geocoding result as parsed JSON
                // res is the http response, including: status, headers and entity properties

                // create the popup
                var popup = new mapboxgl.Popup({closeOnClick: false})
                    .setLngLat(data.features[0].geometry.coordinates)
                    .setHTML()
                    .addTo(map);

                map.panTo(data.features[0].geometry.coordinates, { duration: 1000});

            });

        });


    }


});

